<mxfile host="app.diagrams.net" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36" version="26.0.16" pages="2">
  <diagram name="模块" id="URdqgQ9ywC9-zDl-EaOu">
    <mxGraphModel dx="1434" dy="746" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="feOOVioLAqPZcGWc1d9--1" value="ActualPositionDB" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="40" y="40" width="160" height="120" as="geometry" />
        </mxCell>
        <mxCell id="feOOVioLAqPZcGWc1d9--2" value="DBConnectionPool&lt;div&gt;//&amp;nbsp;链接 SQL 数据库&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="280" y="40" width="160" height="120" as="geometry" />
        </mxCell>
        <mxCell id="feOOVioLAqPZcGWc1d9--4" value="" style="rhombus;whiteSpace=wrap;html=1;fillColor=#f5f5f5;strokeColor=#666666;fontColor=#333333;" vertex="1" parent="1">
          <mxGeometry x="160" y="130" width="30" height="30" as="geometry" />
        </mxCell>
        <mxCell id="feOOVioLAqPZcGWc1d9--3" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;" edge="1" parent="1" source="feOOVioLAqPZcGWc1d9--4" target="feOOVioLAqPZcGWc1d9--2">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
  <diagram id="OAtjJLmcrKw9Vd1Cq_iK" name="流程">
    <mxGraphModel dx="2539" dy="1270" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="0" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="i-nkXKOmJGmnzbzkcPUM-27" value="" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#f5f5f5;fontColor=#333333;strokeColor=#666666;align=left;verticalAlign=top;" vertex="1" parent="1">
          <mxGeometry x="1480" y="-280" width="800" height="800" as="geometry" />
        </mxCell>
        <mxCell id="i-nkXKOmJGmnzbzkcPUM-12" value="" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#f5f5f5;fontColor=#333333;strokeColor=#666666;" vertex="1" parent="1">
          <mxGeometry x="-360" y="-280" width="800" height="1080" as="geometry" />
        </mxCell>
        <mxCell id="i-nkXKOmJGmnzbzkcPUM-10" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;fillColor=#fff2cc;strokeColor=#d6b656;" edge="1" parent="1" source="i-nkXKOmJGmnzbzkcPUM-3" target="i-nkXKOmJGmnzbzkcPUM-6">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="i-nkXKOmJGmnzbzkcPUM-3" value="Plugin&amp;nbsp;构造函数&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;调用 InitConfig( )&amp;nbsp;进行模块配置初始化&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;fillColor=#fff2cc;strokeColor=#d6b656;" vertex="1" parent="1">
          <mxGeometry x="40" y="-120" width="360" height="80" as="geometry" />
        </mxCell>
        <mxCell id="i-nkXKOmJGmnzbzkcPUM-5" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;fillColor=#fff2cc;strokeColor=#d6b656;" edge="1" parent="1" source="i-nkXKOmJGmnzbzkcPUM-4" target="i-nkXKOmJGmnzbzkcPUM-3">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="i-nkXKOmJGmnzbzkcPUM-4" value="外部框架：create_plugin.h&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;创建 Plugin&amp;nbsp;对象&lt;br&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;fillColor=#fff2cc;strokeColor=#d6b656;" vertex="1" parent="1">
          <mxGeometry x="40" y="-240" width="360" height="80" as="geometry" />
        </mxCell>
        <mxCell id="i-nkXKOmJGmnzbzkcPUM-6" value="&lt;div&gt;InitConfig( )&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;1.&amp;nbsp;初始化 IIMgr，用于管理股票名称到内部整型 index&amp;nbsp;的单例模块，维护了正反管理两者映射的数据结构，使用外部 InstrumentIndex.csv&amp;nbsp;文件进行初始化&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;2.&amp;nbsp;初始化 DIMgr，用于管理交易日到&amp;nbsp;index&amp;nbsp;的单例模块，也是维护了正反&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;查询&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;数据结构，使用 DateIndex.csv&amp;nbsp;进行初始化&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;3.&amp;nbsp;解析&amp;nbsp;projectconfig&amp;nbsp;json&amp;nbsp;文件&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;3.1&amp;nbsp;设置是否 replay&amp;nbsp;模式&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;3.2&amp;nbsp;设置是否&amp;nbsp;debug&amp;nbsp;模式&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;3.3&amp;nbsp;从配置得到 csv&amp;nbsp;输出路径，初始化 CSVMgr，用于以&amp;nbsp;csv&amp;nbsp;形式进行数据记录的单例模块&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;3.4&amp;nbsp;从配置得到&amp;nbsp;signal_address&amp;nbsp;信号地址，本地保存&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;3.5&amp;nbsp;从配置&amp;nbsp;black_white_database&amp;nbsp;字段得到黑白名单数据库字段，得到dsn，然后用于初始化 BlackWhiteList&amp;nbsp;单例对象。这个对象从对应的黑白名单数据库中获取到一系列股票和对应的bool字段，标识该股票是否处于黑白名单中&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;3.6&amp;nbsp;从配置&amp;nbsp;realtime_signal_detabase&amp;nbsp;字段得到信号数据库的 dsn&amp;nbsp;用于初始化 RealTimeSignalDB&amp;nbsp;单例对象。&amp;nbsp;这个对象应该是用于初始化当日信号权重（读取昨日最后一个截面权重）的。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;3.7&amp;nbsp;从配置 preposition_database&amp;nbsp;字段得到昨仓数据库的 dsn，用于初始化 ActualPostionDB&amp;nbsp;对象，这个对象用于从数据库中获取昨日各产品、各个股票持仓&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;3.8&amp;nbsp;从配置&amp;nbsp;signal_configs&amp;nbsp;字段获取各个策略的配置，用于初始化 StrategyMgr，这个对象主要维护了各个&amp;nbsp;策略的更新时间点、以及是不是日频策略等信息（如果策略配置的时间点是盘前，那么就认为这个策略是日频策略）&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;3.9&amp;nbsp;使用刚才解析的&amp;nbsp;signal_address&amp;nbsp;更新 SignalReceiver。&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;SignalReceiver&amp;nbsp;是一个 AnyReceiverSpi，用于接收信号，这个模块功能比较丰富，待进一步细看补充。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;4.&amp;nbsp;解析&amp;nbsp;product&amp;nbsp;config&amp;nbsp;json 文件&lt;/div&gt;&lt;div&gt;4.1&amp;nbsp;从配置&amp;nbsp;default_product_config&amp;nbsp;字段读取默认的产品配置，用于初始化 DefaultProductConfig&amp;nbsp;单例对象。&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;DefaultProductConfig&amp;nbsp;对象包含对应的大策略名称，对标的对冲指数(?)，杠杆、各个子策略的新旧权重，策略的调仓时间等参数&lt;/span&gt;&lt;/div&gt;&lt;div&gt;4.2&amp;nbsp;从配置&amp;nbsp;product&amp;nbsp;configs&amp;nbsp;字段读取产品配置，用于初始化 PositionMgr&amp;nbsp;单例对象。这个对象维护了&amp;nbsp;hash_products_&amp;nbsp;对象，包含了（product id+unistrategy id）到 Product&amp;nbsp;对象之间的映射。在初始化阶段，由&amp;nbsp;json&amp;nbsp;解析出的 config&amp;nbsp;配置去初始化 Product，然后存放到&amp;nbsp;hash_products_&amp;nbsp;数据中。&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;5.&amp;nbsp;初始化 MD 行情模块，MD 对象设置了读取行情的handler（应该类似于shm&amp;nbsp;meta元数据），设置Ti1的回调函数。如果当前是&amp;nbsp;replay&amp;nbsp;模式，那么直接启动 MD.start(0)。&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;verticalAlign=top;fillColor=#fff2cc;strokeColor=#d6b656;" vertex="1" parent="1">
          <mxGeometry x="40" width="360" height="750" as="geometry" />
        </mxCell>
        <mxCell id="i-nkXKOmJGmnzbzkcPUM-7" value="所以黑白名单在具体业务层面具体对应什么含义？为什么不区分黑名单和白名单？" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="-160" y="340" width="160" height="60" as="geometry" />
        </mxCell>
        <mxCell id="i-nkXKOmJGmnzbzkcPUM-8" value="&lt;span style=&quot;text-align: left;&quot;&gt;signal_address&amp;nbsp;待细看&lt;/span&gt;" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="-160" y="430" width="160" height="50" as="geometry" />
        </mxCell>
        <mxCell id="i-nkXKOmJGmnzbzkcPUM-9" value="&lt;div style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;我们&amp;nbsp;product&amp;nbsp;和大策略是一个概念吗？换句话说product&amp;nbsp;和大策略是一一对应吗？&lt;/span&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="-160" y="500" width="160" height="60" as="geometry" />
        </mxCell>
        <mxCell id="i-nkXKOmJGmnzbzkcPUM-13" value="&lt;font style=&quot;font-size: 16px;&quot;&gt;初始化流程&lt;/font&gt;" style="text;html=1;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" vertex="1" parent="1">
          <mxGeometry x="-330" y="-250" width="110" height="30" as="geometry" />
        </mxCell>
        <mxCell id="i-nkXKOmJGmnzbzkcPUM-17" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;fillColor=#fff2cc;strokeColor=#d6b656;" edge="1" parent="1" source="i-nkXKOmJGmnzbzkcPUM-14" target="i-nkXKOmJGmnzbzkcPUM-15">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="i-nkXKOmJGmnzbzkcPUM-14" value="收到行情" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#fff2cc;strokeColor=#d6b656;" vertex="1" parent="1">
          <mxGeometry x="1880" y="-240" width="360" height="40" as="geometry" />
        </mxCell>
        <mxCell id="i-nkXKOmJGmnzbzkcPUM-18" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;fillColor=#fff2cc;strokeColor=#d6b656;" edge="1" parent="1" source="i-nkXKOmJGmnzbzkcPUM-15" target="i-nkXKOmJGmnzbzkcPUM-16">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="i-nkXKOmJGmnzbzkcPUM-15" value="Plugin::Action&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;实盘（非replay场景）：&lt;div&gt;调用 MD&amp;nbsp;模块的 MDCallback()&amp;nbsp;方法&lt;/div&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;verticalAlign=top;fillColor=#fff2cc;strokeColor=#d6b656;" vertex="1" parent="1">
          <mxGeometry x="1880" y="-160" width="360" height="80" as="geometry" />
        </mxCell>
        <mxCell id="i-nkXKOmJGmnzbzkcPUM-21" value="ti1&amp;nbsp;发生更新时" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;fillColor=#fff2cc;strokeColor=#d6b656;" edge="1" parent="1" source="i-nkXKOmJGmnzbzkcPUM-16" target="i-nkXKOmJGmnzbzkcPUM-20">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="i-nkXKOmJGmnzbzkcPUM-16" value="MD::MDCallback&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;1. 解析行情结构&lt;/div&gt;&lt;div&gt;2.&amp;nbsp;更新当前最新的接收行情时间戳&amp;nbsp;latest_timestamp_&lt;/div&gt;&lt;div&gt;3.&amp;nbsp;从当前行情时间得到对应的&amp;nbsp;ti1&lt;/div&gt;&lt;div&gt;4.&amp;nbsp;从当前行情取出&amp;nbsp;lastprice，判断价格是否有效&lt;/div&gt;&lt;div&gt;5.&amp;nbsp;更新对应股票对应 ti1 的价格到 MD::index_prices_ 中&lt;/div&gt;&lt;div&gt;6.&amp;nbsp;得到对应&amp;nbsp;stock&amp;nbsp;的&amp;nbsp;ii，更新 ii 的价格到 MD::ti1_prices 中&lt;/div&gt;&lt;div&gt;7.&amp;nbsp;判断当前时点对应的&amp;nbsp;ti1&amp;nbsp;发生变化，触发&amp;nbsp;ti1&amp;nbsp;回调函数 ti1callback_&lt;/div&gt;&lt;div&gt;8.&amp;nbsp;得到当前时点对应的&amp;nbsp;ti5&lt;/div&gt;&lt;div&gt;9.&amp;nbsp;更新&amp;nbsp;ii&amp;nbsp;的价格到 MD::ti5_prices_&amp;nbsp;中&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;verticalAlign=top;fillColor=#fff2cc;strokeColor=#d6b656;" vertex="1" parent="1">
          <mxGeometry x="1880" y="-40" width="360" height="200" as="geometry" />
        </mxCell>
        <mxCell id="i-nkXKOmJGmnzbzkcPUM-19" value="每个&amp;nbsp;tick&amp;nbsp;来都会去计算当前timestamp所属的 ti1 并更新其信息（stock&amp;nbsp;价格，ii&amp;nbsp;价格，timestamp等），但是只有当前&amp;nbsp;ti1&amp;nbsp;发生更新时才会触发&amp;nbsp;ti1callback&amp;nbsp;回调函数；ti5&amp;nbsp;同理" style="rounded=0;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
          <mxGeometry x="1680" width="160" height="120" as="geometry" />
        </mxCell>
        <mxCell id="i-nkXKOmJGmnzbzkcPUM-24" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;fillColor=#fff2cc;strokeColor=#d6b656;" edge="1" parent="1" source="i-nkXKOmJGmnzbzkcPUM-20" target="i-nkXKOmJGmnzbzkcPUM-22">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="i-nkXKOmJGmnzbzkcPUM-20" value="&lt;div&gt;on_minute1&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;调用 PositionMgr::OnMinute1&amp;nbsp;触发仓位模块的1分钟回调函数&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;verticalAlign=top;fillColor=#fff2cc;strokeColor=#d6b656;" vertex="1" parent="1">
          <mxGeometry x="1880" y="240" width="360" height="80" as="geometry" />
        </mxCell>
        <mxCell id="i-nkXKOmJGmnzbzkcPUM-22" value="&lt;div&gt;PositionMgr::OnMinute1&lt;/div&gt;&lt;div&gt;使用当前传入的 ti，通过 StrategyMgr 找到这个 ti&amp;nbsp;对应的需要更新的策略集合，如果是空的，什么都不做&lt;/div&gt;&lt;div&gt;如果集合不是空的（即当前&amp;nbsp;ti&amp;nbsp;有策略需要更新），那么就通过&amp;nbsp;hash_products_&amp;nbsp;去遍历产品，将当前&amp;nbsp;ti&amp;nbsp;放到该产品的 Product::ti_queue 中。（&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;Product::SyncAdjustProduct&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;）&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;verticalAlign=top;fillColor=#fff2cc;strokeColor=#d6b656;" vertex="1" parent="1">
          <mxGeometry x="1880" y="360" width="360" height="120" as="geometry" />
        </mxCell>
        <mxCell id="i-nkXKOmJGmnzbzkcPUM-23" value="注意：此处的&amp;nbsp; StrategyMgr&amp;nbsp; 查找出的 strategy&amp;nbsp;集合只是拿来简单判断流程，并没有向下进一步传入，当需要更新时，真正做的事情是将该&amp;nbsp;ti&amp;nbsp;放到了各个产品的&amp;nbsp;ti_queue&amp;nbsp;中异步处理" style="rounded=0;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="1">
          <mxGeometry x="1680" y="360" width="160" height="120" as="geometry" />
        </mxCell>
        <mxCell id="i-nkXKOmJGmnzbzkcPUM-28" value="&lt;span style=&quot;color: rgb(51, 51, 51); text-align: left;&quot;&gt;&lt;font style=&quot;font-size: 16px;&quot;&gt;接收行情流程&lt;/font&gt;&lt;/span&gt;" style="text;html=1;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" vertex="1" parent="1">
          <mxGeometry x="1510" y="-260" width="120" height="30" as="geometry" />
        </mxCell>
        <mxCell id="i-nkXKOmJGmnzbzkcPUM-29" value="IIMgr的初始化：&lt;div&gt;构造函数中读取 InstrumentIndex.csv&amp;nbsp;文件得到股票索引正反维护到 hash_code2ii&amp;nbsp;和 hash_ii2code&amp;nbsp;中&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;verticalAlign=top;fillColor=#d5e8d4;strokeColor=#82b366;" vertex="1" parent="1">
          <mxGeometry x="520" y="-280" width="680" height="80" as="geometry" />
        </mxCell>
        <mxCell id="i-nkXKOmJGmnzbzkcPUM-30" value="DIMgr的初始化：&lt;div&gt;构造函数中读取 DateIndex.csv&amp;nbsp;文件得到日期索引正反维护到&amp;nbsp;map_date2di&amp;nbsp;和 map_di2date&amp;nbsp;中&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;verticalAlign=top;fillColor=#d5e8d4;strokeColor=#82b366;" vertex="1" parent="1">
          <mxGeometry x="520" y="-180" width="680" height="60" as="geometry" />
        </mxCell>
        <mxCell id="i-nkXKOmJGmnzbzkcPUM-31" value="全局初始化：&lt;div&gt;config::SetReplay()&amp;nbsp;设置全局回放模式标志位&lt;/div&gt;&lt;div&gt;config::SetDebug( )&amp;nbsp;设置全局调试模式标志位&lt;/div&gt;&lt;div&gt;config::SetSignalAddr&amp;nbsp;设置全局的信号接收地址&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;verticalAlign=top;fillColor=#d5e8d4;strokeColor=#82b366;" vertex="1" parent="1">
          <mxGeometry x="520" y="-100" width="680" height="80" as="geometry" />
        </mxCell>
        <mxCell id="i-nkXKOmJGmnzbzkcPUM-33" value="CSVMgr 初始化：&lt;div&gt;构造函数中更新&amp;nbsp;csv&amp;nbsp;输出路径到 csv_dir_&amp;nbsp;中&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;verticalAlign=top;fillColor=#d5e8d4;strokeColor=#82b366;" vertex="1" parent="1">
          <mxGeometry x="520" width="680" height="60" as="geometry" />
        </mxCell>
        <mxCell id="i-nkXKOmJGmnzbzkcPUM-34" value="&lt;div&gt;BlackWhiteList 的初始化：&lt;/div&gt;&lt;div&gt;BlackWhiteList::Init()&amp;nbsp;&lt;/div&gt;&lt;div&gt;1.&amp;nbsp;设置&amp;nbsp;dsn&lt;/div&gt;&lt;div&gt;2.&amp;nbsp;创建数据库连接池&amp;nbsp;pool，连接池大小为2&lt;/div&gt;&lt;div&gt;3.&amp;nbsp;使用今天日期获取今天的股票黑白名单项目，放入一个 vector 中返回，然后用这个 vector&amp;nbsp;更新 hash_black_white&amp;nbsp;结构，以字典的方式维护股票名称和是否在黑白名单（valid字段）的对应关系。&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;verticalAlign=top;fillColor=#d5e8d4;strokeColor=#82b366;" vertex="1" parent="1">
          <mxGeometry x="520" y="80" width="680" height="120" as="geometry" />
        </mxCell>
        <mxCell id="i-nkXKOmJGmnzbzkcPUM-35" value="&lt;div&gt;RealTimeSignalDB 的初始化：&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;RealTimeSignalDB::Init()&lt;/div&gt;&lt;div&gt;1.&amp;nbsp;设置&amp;nbsp;dsn&lt;/div&gt;&lt;div&gt;2.&amp;nbsp;创建数据库连接池对象&amp;nbsp;poll&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;verticalAlign=top;fillColor=#d5e8d4;strokeColor=#82b366;" vertex="1" parent="1">
          <mxGeometry x="520" y="220" width="680" height="100" as="geometry" />
        </mxCell>
        <mxCell id="i-nkXKOmJGmnzbzkcPUM-36" value="&lt;div&gt;ActualPositionDB 的初始化：&lt;/div&gt;&lt;div&gt;ActualPositionDB::Init()&amp;nbsp;&lt;/div&gt;&lt;div&gt;1.&amp;nbsp;设置&amp;nbsp;dsn&lt;/div&gt;&lt;div&gt;2.&amp;nbsp;创建数据库连接池对象&amp;nbsp;pool&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;verticalAlign=top;fillColor=#d5e8d4;strokeColor=#82b366;" vertex="1" parent="1">
          <mxGeometry x="520" y="340" width="680" height="80" as="geometry" />
        </mxCell>
        <mxCell id="i-nkXKOmJGmnzbzkcPUM-37" value="&lt;div&gt;StrategyMgr 的初始化：&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;StrategyMgr::&lt;/span&gt;Init()&amp;nbsp;&lt;/div&gt;&lt;div&gt;1.&amp;nbsp;解析配置文件中的&amp;nbsp;signal_configs&amp;nbsp;字段&lt;/div&gt;&lt;div&gt;2.&amp;nbsp;遍历每个&amp;nbsp;signal_configs&amp;nbsp;下元素，得到每个strategy对应的更新时间点，得到对应的&amp;nbsp;ti1&lt;/div&gt;&lt;div&gt;3.&amp;nbsp;如果这个ti1 &amp;lt;= 6，即对应盘前时间点，那么表示这个策略只是个日频策略，更新到 hash_strategy_daily_&amp;nbsp;数据结构中&lt;/div&gt;&lt;div&gt;4.&amp;nbsp;更新&amp;nbsp;map_strategy_times_，维护 strategy&amp;nbsp;下有哪些 ti&amp;nbsp;需要更新&lt;/div&gt;&lt;div&gt;5.&amp;nbsp;更新 map_ti_strategies_，维护某个&amp;nbsp;ti&amp;nbsp;下有哪些&amp;nbsp;strategy&amp;nbsp;需要更新&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;verticalAlign=top;fillColor=#d5e8d4;strokeColor=#82b366;" vertex="1" parent="1">
          <mxGeometry x="520" y="440" width="680" height="120" as="geometry" />
        </mxCell>
        <mxCell id="i-nkXKOmJGmnzbzkcPUM-38" value="&lt;div&gt;SignalReceiver 的初始化：&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;SignalReceiver::Init()&lt;/div&gt;&lt;div&gt;1.&amp;nbsp;使用&amp;nbsp;signal_addr&amp;nbsp;初始化 sub_config_&amp;nbsp;配置，创建&amp;nbsp;api&amp;nbsp;对象，并把自己作为&amp;nbsp;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;AnyReceiverSpi&amp;nbsp;注册到 API&amp;nbsp;中&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;2.&amp;nbsp;创建信号缓存的目录 cache_dir&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;SignalReceiver::Start()&lt;/div&gt;&lt;div&gt;1.&amp;nbsp;使用&amp;nbsp;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;sub_config_&amp;nbsp; 去初始化&amp;nbsp;api&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;#&amp;nbsp;初始化后应该就意味着&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;SignalReceiver&amp;nbsp;已经启动了，后续就等待回调 OnNewSignalData 了&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;verticalAlign=top;fillColor=#d5e8d4;strokeColor=#82b366;" vertex="1" parent="1">
          <mxGeometry x="520" y="580" width="680" height="180" as="geometry" />
        </mxCell>
        <mxCell id="i-nkXKOmJGmnzbzkcPUM-39" value="&lt;div&gt;DefaultProductConfig 的初始化：&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;DefaultProductConfig::Init()&lt;/div&gt;&lt;div&gt;1.&amp;nbsp;根据配置文件 unistrategy 设置大策略&amp;nbsp;unistrategy&amp;nbsp;的名称&lt;/div&gt;&lt;div&gt;2.&amp;nbsp;根据配置文件 hedge_name 设置对标指数&lt;/div&gt;&lt;div&gt;3.&amp;nbsp;根据配置文件 leverage 设置杠杆系数&lt;/div&gt;&lt;div&gt;4.&amp;nbsp;根据配置文件 output_if_not_ok&amp;nbsp;设置对应标志位&lt;/div&gt;&lt;div&gt;5.&amp;nbsp;根据配置文件 addition_volume&amp;nbsp;设置本地变量&lt;/div&gt;&lt;div&gt;6.&amp;nbsp;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;根据配置文件&amp;nbsp;multiply_volume&amp;nbsp;设置本地变量&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;7.&amp;nbsp;遍历配置文件中的&amp;nbsp;sub_strategies，根据&amp;nbsp;old_weight&amp;nbsp;字段，将策略的旧权重维护到 old_strategy_weights&amp;nbsp;中&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;8.&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;遍历配置文件中的&amp;nbsp;sub_strategies，根据&amp;nbsp;new_weight&amp;nbsp;字段，将策略的新权重维护到&amp;nbsp;new_strategy_weights&amp;nbsp;中&lt;/span&gt;&lt;/div&gt;&lt;div&gt;9.&amp;nbsp;分别检查旧权重和新权重的和是不是为1&lt;/div&gt;&lt;div&gt;10.&amp;nbsp;根据配置文件 adjust_weight_time&amp;nbsp;更新产品的调整权重时间到&amp;nbsp;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;DefaultProductConfig::&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;adjust_weight_time&amp;nbsp;变量&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;verticalAlign=top;fillColor=#d5e8d4;strokeColor=#82b366;" vertex="1" parent="1">
          <mxGeometry x="520" y="780" width="680" height="200" as="geometry" />
        </mxCell>
        <mxCell id="i-nkXKOmJGmnzbzkcPUM-40" value="&lt;div&gt;PositionMgr 的初始化：&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;PositionMgr&lt;/span&gt;::Init()&lt;/div&gt;&lt;div&gt;1. 使用配置中的&amp;nbsp;product_config&amp;nbsp;初始化 ProductConfig&amp;nbsp;对象&lt;/div&gt;&lt;div&gt;2. 用&amp;nbsp;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;ProductConfig&amp;nbsp; 对象初始化 Produc&amp;nbsp;对象，然后维护到&amp;nbsp;hash_products_&amp;nbsp;数据中。hash_products_使用&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;product id+unistrategy id&amp;nbsp;和一个Product&amp;nbsp;对象进行关联&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;verticalAlign=top;fillColor=#d5e8d4;strokeColor=#82b366;" vertex="1" parent="1">
          <mxGeometry x="520" y="1000" width="680" height="120" as="geometry" />
        </mxCell>
        <mxCell id="i-nkXKOmJGmnzbzkcPUM-41" value="&lt;div&gt;Product 的初始化：&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;使用 ProductConfig 调用 Product&lt;/span&gt;::Init() 进行初始化：&lt;/div&gt;&lt;div&gt;1. 根据&amp;nbsp;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;ProductConfig&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&amp;nbsp;中的 strategy_list 遍历当前所有策略，通过 RealTimeSignalDB，使用（策略名+日期）获取昨日持仓，以vector &amp;lt;double&amp;gt; 形式返回，以 {策略名:权重数组} 的形式放到 map_strategy_weights 中。&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;map_strategy_weights&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&amp;nbsp;维护了当前每个策略对应的权重数组。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;2. 再将&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;map_strategy_weights 放到 map_ti_strategy_weights[0] 中。&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;map_ti_strategy_weights 维护的是每个时间点 ti 上的所有策略权重数据。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;3.&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;再将&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;map_strategy_weights 赋值给 map_strategy_tvr_adjust_weights 作为初始值。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;4. * 计算每只股票的权重 weight： 【这个weight好像没有用到，废弃代码？】&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;4.1 遍历所有策略名&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;4.2 从&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;map_strategy_weights[策略名]&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&amp;nbsp;得到昨天该策略的所有股票权重&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;4.3 从 old_strategy_weights[&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;策略名&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;] 得到这个策略的旧权重&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;4.4 以上两者相乘，得到这个策略引入的股票实际权重&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;4.5 将各个策略下的股票权重进行累加，得到产品最终的个股权重&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;5. 计算该产品每个股票的昨日持仓手数 prev_volumes ，放到 map_ti_volumes[0] 中。&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;map_ti_volumes 维护了 每个 ti 各个股票的持仓手数情况。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;6. 计算每个策略的个股归一化权重 map_strategy_normalized_weight，&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;map_strategy_normalized_weight[策略名] 是一个数组，维护了这个策略经过归一化计算的当前各个股票的权重。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;7. 使用昨日实际持仓&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;prev_volumes&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&amp;nbsp; 和&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;map_strategy_normalized_weight 计算得到各个策略初始化底仓 ：&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;7.1 对于一个股票，将各个策略在这个股票上的归一化权重进行排序。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;7.2 根据排序后的权重由大到小逐个计算各策略在这个股票上的初始仓位。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;7.3 第一轮计算，每个策略分配权重 = （&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;待分配仓位 * 归一化权重&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;）向下取整到100的整数倍，每次都会更新还剩余仓位&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;7.4 如果还剩余仓位，进行第二轮计算，此时按照（待分配仓位*归一化权重）向上取整到100的整数倍处理，但是如果分配超了，那么按照实际的 pre volume 差值进行补齐，从而保证一定不会超过昨日持仓。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;8. 如果当前配置需要减仓，那么使用需要减仓的手数 volume 和 hedge_volume 算出减仓后的比例系数 rate，从而得到新的目标仓位 target_volumes。然后使用&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;target_volumes 和归一化权重重新计算初始底仓，同时根据 ti 计算得到每个 ti 的均匀减仓数量，维护到 map_ti_sub_volumes 中。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;9. 将初始化的持仓 map_strategy_init_volumes 缓存到初始化理论持仓 map_strategy_init_theory_volumes 中。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;10. 如果今天需要调权，那么使用&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;map_strategy_init_theory_volumes&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&amp;nbsp;进一步结合调权进行计算：&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;* 如果有子策略调权，那么这部分的调仓布恩那个在初始化仓位的时候进行调整，而应该在调权的时点再做调整，所以这部分需要分离出来。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;10.1 遍历所有策略。对于每一个策略，计算得到这个策略的新权重-旧权重的差值 delta&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;10.2 如果 delta 为负数（即新权重小于旧权重）：&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;10.2.1 将 |delta| 累加到 ProductConfig 的 total_adjust_weight 中&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;10.2.2 计算 冻结比例 = |delta| / 旧权重，冻结量= 冻结比例 *&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;map_strategy_init_theory_volumes&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&amp;nbsp;[策略][ii]&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;10.2.3 累加并维护这只票的总冻结量到 adjust_weight_locked_volumes[ii] 中&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;10.2.4 计算 未冻结量 = (1-冻结比例)&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&amp;nbsp;*&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;map_strategy_init_theory_volumes&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&amp;nbsp;[策略][ii]&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;10.2.5 更新理论初始持仓&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;map_strategy_init_theory_volumes&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&amp;nbsp;[策略][ii] 为未冻结量&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;11. 将计算得到的理论初始持仓维护到 map_ti_adjust_theory_volumes[0] 中&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;12. 结合当前 建仓/清仓/加仓/减仓 逻辑检查前日持仓是否非0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;13. 输出初始化持仓明细&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;14. 如果是清仓，直接按照 减全仓 的方式计算出 map_ti_clear_volumes，表示每个&amp;nbsp;ti&amp;nbsp;的清仓量&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;15.&amp;nbsp;启动线程，执行 ThreadFunc&amp;nbsp;函数，线程维护到&amp;nbsp;adjust_thread&amp;nbsp;成员中。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;verticalAlign=top;fillColor=#d5e8d4;strokeColor=#82b366;" vertex="1" parent="1">
          <mxGeometry x="520" y="1640" width="680" height="680" as="geometry" />
        </mxCell>
        <mxCell id="i-nkXKOmJGmnzbzkcPUM-42" value="&lt;div&gt;ProductConfig 的初始化：&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;ProductConfig&lt;/span&gt;::Init()&lt;/div&gt;&lt;div&gt;1. 获取默认的配置对象&amp;nbsp;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;DefaultProductConfig&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;2. 根据配置文件&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;product id&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;设置 产品ID&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;3.&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;根据配置文件 unistrategy 设置大策略名&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;4. 将&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;product id 和&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;unistrategy&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&amp;nbsp;拼接设置为 config_id&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;5. 根据配置文件 hedge_name 字段设置对标指数名称，如果没有则使用默认&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;配置对象的&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;对标指数&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255)); background-color: transparent;&quot;&gt;6. 根据配置文件 leverage 字段设置杠杆系数，如果没有则使用默认&lt;/span&gt;&lt;span style=&quot;color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255)); background-color: transparent;&quot;&gt;配置对象的&lt;/span&gt;&lt;span style=&quot;color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255)); background-color: transparent;&quot;&gt;杠杆系数&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255)); background-color: transparent;&quot;&gt;7. 根据配置文件&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255)); background-color: transparent;&quot;&gt;hedge_volume&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255)); background-color: transparent;&quot;&gt;设置持仓&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255)); background-color: transparent;&quot;&gt;8. 根据配置文件&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255)); background-color: transparent;&quot;&gt;addition_volume&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255)); background-color: transparent;&quot;&gt;设置持仓加法系数&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255)); background-color: transparent;&quot;&gt;9. 根据配置文件&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255)); background-color: transparent;&quot;&gt;multiply_volume&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255)); background-color: transparent;&quot;&gt;设置持仓乘法系数&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255)); background-color: transparent;&quot;&gt;10.&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;hedge_volume&amp;nbsp; = （&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;hedge_volume&amp;nbsp; +&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;addition_volume&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;）*&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;multiply_volume&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;11. 根据配置文件 output_if_not_ok 设置输出标志位&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;12. 根据配置文件中的 sub_strategies 设置子策略的新旧权重，以 { 策略名: 新权重 } 和&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;{ 策略名: 旧权重 }&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&amp;nbsp;的形式分别维护到 new_strategy_weights 和 old_strategy_weights 中&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;13. 使用&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;new_strategy_weights&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&amp;nbsp; 和&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;old_strategy_weights&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&amp;nbsp; 检查权重之和是否为1&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;14. 将&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;old_strategy_weights&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&amp;nbsp; 中的策略名都放入 strategy_list 中&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;15. 然后根据&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;strategy_list 遍历当前依赖的策略名，通过 StrategyMgr 查询得到各个策略的更新 ti，然后将这些 ti 使用 set 进行去重和排序后放入 all_ti_triggers 中&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;16. 根据对标指数名称 hedge_name 查询出对标指数代码并设置到 hedge_code&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;17. 根据配置文件 requests 设置产品请求：&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;17.1 请求可选，包括：清仓/建仓/加仓/减仓/特殊调仓 中的至多一种。如果请求字段为空就是默认的调仓。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;17.2 清仓处理：根据配置中的 clear_config 字段设置 ClearConfig 对象&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;17.3 建仓处理：根据配置中的 create_config 字段设置 CreateConfig 对象&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;17.4 建仓处理：根据配置中的 sub_config 字段设置 SubConfig 对象&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;17.5 建仓处理：根据配置中的 add_config 字段设置 AddConfig 对象&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;17.6 特殊调仓处理：根据配置中的 special_adjust_config 字段设置 SpecialAdjustConfig 对象&lt;/div&gt;&lt;div&gt;18. 根据配置文件的 adjust_weight_time，转换为对应的 ti 并设置到 adjust_weight_ti 中&lt;/div&gt;&lt;div&gt;19. 使用&amp;nbsp;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;new_strategy_weights&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&amp;nbsp;和&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;old_strategy_weights&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;检查所有策略的新旧权重，如果有变化，那么意味这个产品需要调整权重，那么调权重的时点&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;adjust_weight_ti&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&amp;nbsp; 必须大于1&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;20. 使用&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;all_ti_triggers&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;检查调整权重的时点&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;adjust_weight_ti&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;必须在子策略的触发时间点列表中&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;verticalAlign=top;fillColor=#d5e8d4;strokeColor=#82b366;" vertex="1" parent="1">
          <mxGeometry x="520" y="1140" width="680" height="480" as="geometry" />
        </mxCell>
        <mxCell id="i-nkXKOmJGmnzbzkcPUM-44" value="product 的配置文件结构注：default 部分可以认为是所有product 缺省的，下面的 product_config 是每个产品自己的属性定义" style="rounded=0;whiteSpace=wrap;html=1;align=left;verticalAlign=top;" vertex="1" parent="1">
          <mxGeometry x="-160" y="580" width="160" height="120" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
